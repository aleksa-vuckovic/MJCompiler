INFO  22:15:55,216 - Compiling source file: D:\7\PP1\Projekat\projekat\workspace\MJCompiler\test\if-for.mj
INFO  22:15:55,277 - Parser je ucitao token:#2 -> program
INFO  22:15:55,278 - Parser je ucitao token:#45 -> MJProgram
INFO  22:15:55,278 - Parser je ucitao token:#45 -> int
INFO  22:15:55,280 - Parser je ucitao token:#45 -> x
INFO  22:15:55,281 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,282 - Parser je ucitao token:#45 -> int
INFO  22:15:55,283 - Parser je ucitao token:#45 -> y
INFO  22:15:55,283 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,283 - Parser je ucitao token:#20 -> {
INFO  22:15:55,283 - Parser je ucitao token:#45 -> int
INFO  22:15:55,284 - Parser je ucitao token:#45 -> sqrt
INFO  22:15:55,285 - Parser je ucitao token:#18 -> (
INFO  22:15:55,287 - Parser je ucitao token:#45 -> int
INFO  22:15:55,287 - Parser je ucitao token:#45 -> t
INFO  22:15:55,287 - Parser je ucitao token:#19 -> )
INFO  22:15:55,288 - Parser je ucitao token:#45 -> int
INFO  22:15:55,289 - Parser je ucitao token:#45 -> res
INFO  22:15:55,290 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,290 - Parser je ucitao token:#20 -> {
INFO  22:15:55,290 - Parser je ucitao token:#45 -> res
INFO  22:15:55,291 - Parser je ucitao token:#41 -> =
INFO  22:15:55,291 - Parser je ucitao token:#44 -> 0
INFO  22:15:55,292 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,293 - Parser je ucitao token:#15 -> if
INFO  22:15:55,293 - Parser je ucitao token:#18 -> (
INFO  22:15:55,294 - Parser je ucitao token:#46 -> 1
INFO  22:15:55,294 - Parser je ucitao token:#19 -> )
INFO  22:15:55,296 - Parser je ucitao token:#20 -> {
INFO  22:15:55,296 - Parser je ucitao token:#45 -> res
INFO  22:15:55,296 - Parser je ucitao token:#41 -> =
INFO  22:15:55,296 - Parser je ucitao token:#44 -> 1
INFO  22:15:55,296 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,297 - Parser je ucitao token:#21 -> }
INFO  22:15:55,297 - Parser je ucitao token:#17 -> for
INFO  22:15:55,298 - Parser je ucitao token:#18 -> (
INFO  22:15:55,298 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,300 - Parser je ucitao token:#45 -> res
INFO  22:15:55,300 - Parser je ucitao token:#30 -> *
INFO  22:15:55,300 - Parser je ucitao token:#45 -> res
INFO  22:15:55,301 - Parser je ucitao token:#38 -> <=
INFO  22:15:55,302 - Parser je ucitao token:#45 -> t
INFO  22:15:55,303 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,304 - Parser je ucitao token:#19 -> )
INFO  22:15:55,304 - Parser je ucitao token:#20 -> {
INFO  22:15:55,305 - Parser je ucitao token:#45 -> res
INFO  22:15:55,305 - Parser je ucitao token:#41 -> =
INFO  22:15:55,305 - Parser je ucitao token:#45 -> res
INFO  22:15:55,305 - Parser je ucitao token:#28 -> +
INFO  22:15:55,305 - Parser je ucitao token:#44 -> 1
INFO  22:15:55,307 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,307 - Parser je ucitao token:#21 -> }
INFO  22:15:55,307 - Parser je ucitao token:#9 -> return
INFO  22:15:55,307 - Parser je ucitao token:#45 -> res
INFO  22:15:55,307 - Parser je ucitao token:#31 -> /
INFO  22:15:55,308 - Parser je ucitao token:#44 -> 2
INFO  22:15:55,309 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,309 - Parser je ucitao token:#21 -> }
INFO  22:15:55,309 - Parser je ucitao token:#6 -> void
INFO  22:15:55,311 - Parser je ucitao token:#45 -> main
INFO  22:15:55,311 - Parser je ucitao token:#18 -> (
INFO  22:15:55,311 - Parser je ucitao token:#19 -> )
INFO  22:15:55,312 - Parser je ucitao token:#20 -> {
INFO  22:15:55,312 - Parser je ucitao token:#12 -> print
INFO  22:15:55,312 - Parser je ucitao token:#18 -> (
INFO  22:15:55,312 - Parser je ucitao token:#45 -> sqrt
INFO  22:15:55,313 - Parser je ucitao token:#18 -> (
INFO  22:15:55,313 - Parser je ucitao token:#44 -> 120
INFO  22:15:55,313 - Parser je ucitao token:#19 -> )
INFO  22:15:55,314 - Parser je ucitao token:#19 -> )
INFO  22:15:55,315 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,315 - Parser je ucitao token:#9 -> return
INFO  22:15:55,316 - Parser je ucitao token:#44 -> 1
INFO  22:15:55,316 - Parser je ucitao token:#26 -> ;
INFO  22:15:55,316 - Parser je ucitao token:#21 -> }
INFO  22:15:55,316 - Parser je ucitao token:#21 -> }
INFO  22:15:55,316 - Parser je ucitao token:#0 -> EOF
INFO  22:15:55,318 - Parser je ucitao token:#0 -> EOF
INFO  22:15:55,319 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  NamespaceListEnd(
  ) [NamespaceListEnd]
  DeclListItem(
    DeclListItem(
      DeclListEnd(
      ) [DeclListEnd]
      DeclVar(
        VarDeclLine(
          VarDeclLineStart(
            TypeSimple(
             int
            ) [TypeSimple]
          ) [VarDeclLineStart]
          VarDeclCommaEnd(
            VarDeclScalar(
             x
            ) [VarDeclScalar]
          ) [VarDeclCommaEnd]
        ) [VarDeclLine]
      ) [DeclVar]
    ) [DeclListItem]
    DeclVar(
      VarDeclLine(
        VarDeclLineStart(
          TypeSimple(
           int
          ) [TypeSimple]
        ) [VarDeclLineStart]
        VarDeclCommaEnd(
          VarDeclScalar(
           y
          ) [VarDeclScalar]
        ) [VarDeclCommaEnd]
      ) [VarDeclLine]
    ) [DeclVar]
  ) [DeclListItem]
  MethodListItem(
    MethodListItem(
      MethodListEnd(
      ) [MethodListEnd]
      Method(
        MethodDeclaration(
          MethodNameRet(
            TypeSimple(
             int
            ) [TypeSimple]
           sqrt
          ) [MethodNameRet]
          FormalParamCommaEnd(
            FormalParamScalar(
              TypeSimple(
               int
              ) [TypeSimple]
             t
            ) [FormalParamScalar]
          ) [FormalParamCommaEnd]
        ) [MethodDeclaration]
        VarDeclLineListItem(
          VarDeclLineListEnd(
          ) [VarDeclLineListEnd]
          VarDeclLine(
            VarDeclLineStart(
              TypeSimple(
               int
              ) [TypeSimple]
            ) [VarDeclLineStart]
            VarDeclCommaEnd(
              VarDeclScalar(
               res
              ) [VarDeclScalar]
            ) [VarDeclCommaEnd]
          ) [VarDeclLine]
        ) [VarDeclLineListItem]
        StatementListItem(
          StatementListItem(
            StatementListItem(
              StatementListItem(
                StatementListEnd(
                ) [StatementListEnd]
                StatementDesignatorStatement(
                  DesignatorStatementAssign(
                    DesignatorSimple(
                     res
                    ) [DesignatorSimple]
                    Assignop(
                    ) [Assignop]
                    ExprSingle(
                      TermSingle(
                        FactorNum(
                         0
                        ) [FactorNum]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [DesignatorStatementAssign]
                ) [StatementDesignatorStatement]
              ) [StatementListItem]
              StatementUnmatchedIf(
                IfCondition(
                  ConditionSingle(
                    ConditionTermSingle(
                      ConditonFactorExpr(
                        ExprSingle(
                          TermSingle(
                            FactorBool(
                             1
                            ) [FactorBool]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ConditonFactorExpr]
                    ) [ConditionTermSingle]
                  ) [ConditionSingle]
                ) [IfCondition]
                IfStatement(
                  StatementBlock(
                    StatementListItem(
                      StatementListEnd(
                      ) [StatementListEnd]
                      StatementDesignatorStatement(
                        DesignatorStatementAssign(
                          DesignatorSimple(
                           res
                          ) [DesignatorSimple]
                          Assignop(
                          ) [Assignop]
                          ExprSingle(
                            TermSingle(
                              FactorNum(
                               1
                              ) [FactorNum]
                            ) [TermSingle]
                          ) [ExprSingle]
                        ) [DesignatorStatementAssign]
                      ) [StatementDesignatorStatement]
                    ) [StatementListItem]
                  ) [StatementBlock]
                ) [IfStatement]
              ) [StatementUnmatchedIf]
            ) [StatementListItem]
            StatementFor(
              ForEntry(
                DesignatorStatementCommaEmpty(
                ) [DesignatorStatementCommaEmpty]
              ) [ForEntry]
              ForConditionNonempty(
                ConditionFactorRel(
                  ExprSingle(
                    TermMul(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           res
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                      MulopMul(
                      ) [MulopMul]
                      FactorDesignator(
                        DesignatorSimple(
                         res
                        ) [DesignatorSimple]
                      ) [FactorDesignator]
                    ) [TermMul]
                  ) [ExprSingle]
                  RelopLe(
                  ) [RelopLe]
                  ExprSingle(
                    TermSingle(
                      FactorDesignator(
                        DesignatorSimple(
                         t
                        ) [DesignatorSimple]
                      ) [FactorDesignator]
                    ) [TermSingle]
                  ) [ExprSingle]
                ) [ConditionFactorRel]
              ) [ForConditionNonempty]
              ForExit(
                DesignatorStatementCommaEmpty(
                ) [DesignatorStatementCommaEmpty]
              ) [ForExit]
              StatementBlock(
                StatementListItem(
                  StatementListEnd(
                  ) [StatementListEnd]
                  StatementDesignatorStatement(
                    DesignatorStatementAssign(
                      DesignatorSimple(
                       res
                      ) [DesignatorSimple]
                      Assignop(
                      ) [Assignop]
                      ExprAdd(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorSimple(
                               res
                              ) [DesignatorSimple]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                        AddopAdd(
                        ) [AddopAdd]
                        TermSingle(
                          FactorNum(
                           1
                          ) [FactorNum]
                        ) [TermSingle]
                      ) [ExprAdd]
                    ) [DesignatorStatementAssign]
                  ) [StatementDesignatorStatement]
                ) [StatementListItem]
              ) [StatementBlock]
            ) [StatementFor]
          ) [StatementListItem]
          StatementReturnExpr(
            ExprSingle(
              TermMul(
                TermSingle(
                  FactorDesignator(
                    DesignatorSimple(
                     res
                    ) [DesignatorSimple]
                  ) [FactorDesignator]
                ) [TermSingle]
                MulopDiv(
                ) [MulopDiv]
                FactorNum(
                 2
                ) [FactorNum]
              ) [TermMul]
            ) [ExprSingle]
          ) [StatementReturnExpr]
        ) [StatementListItem]
      ) [Method]
    ) [MethodListItem]
    Method(
      MethodDeclaration(
        MethodNameVoid(
         main
        ) [MethodNameVoid]
        FormalParamCommaEmpty(
        ) [FormalParamCommaEmpty]
      ) [MethodDeclaration]
      VarDeclLineListEnd(
      ) [VarDeclLineListEnd]
      StatementListItem(
        StatementListItem(
          StatementListEnd(
          ) [StatementListEnd]
          StatementPrint(
            ExprSingle(
              TermSingle(
                FactorMethod(
                  MethodInvocation(
                    DesignatorSimple(
                     sqrt
                    ) [DesignatorSimple]
                    ActParsEnd(
                      ActPar(
                        ExprSingle(
                          TermSingle(
                            FactorNum(
                             120
                            ) [FactorNum]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ActPar]
                    ) [ActParsEnd]
                  ) [MethodInvocation]
                ) [FactorMethod]
              ) [TermSingle]
            ) [ExprSingle]
          ) [StatementPrint]
        ) [StatementListItem]
        StatementReturnExpr(
          ExprSingle(
            TermSingle(
              FactorNum(
               1
              ) [FactorNum]
            ) [TermSingle]
          ) [ExprSingle]
        ) [StatementReturnExpr]
      ) [StatementListItem]
    ) [Method]
  ) [MethodListItem]
) [Program]
INFO  22:15:55,320 - ===================================
ERROR 22:15:55,338 - Greska na liniji 18: Tip izraza u return naredbi ne odgovara povratnom tipu metode.
INFO  22:15:55,339 - ======================================
